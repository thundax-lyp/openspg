<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2023 OpenSPG Authors
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software distributed under the License
  ~ is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
  ~ or implied.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.antgroup.openspg.server.infra.dao.mapper.ProjectDOMapper">
  <resultMap id="BaseResultMap" type="com.antgroup.openspg.server.infra.dao.dataobject.ProjectDO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
    <result column="namespace" jdbcType="VARCHAR" property="namespace" />
    <result column="visibility" jdbcType="VARCHAR" property="visibility" />
    <result column="biz_domain_id" jdbcType="BIGINT" property="bizDomainId" />
    <result column="config" jdbcType="LONGVARCHAR" property="config" />
    <result column="tag" jdbcType="VARCHAR" property="tag" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.isValid()">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.isValid()">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="SAMPLE_COLUMN_LIST">
    id, name, description, status, namespace, biz_domain_id, visibility, tag
  </sql>
  <sql id="Base_Column_List">
    id, name, description, status, gmt_create, gmt_modified, namespace, biz_domain_id, config, visibility, tag
  </sql>
  <select id="selectByExample" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ProjectDOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from kg_project_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${@com.antgroup.openspg.server.infra.dao.SecurityUtils@trimSql4OrderBy(orderByClause)}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from kg_project_info
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from kg_project_info where id = #{id,jdbcType=BIGINT};
  </delete>
  <delete id="deleteFromKgOntologyEntity"  parameterType="java.lang.String">
    DELETE FROM kg_ontology_entity WHERE name like concat(#{namespace}, '.%') ;
  </delete>
  <delete id="deleteFromKgOntologyEntityPropertyRange" parameterType="java.lang.Long">
    DELETE FROM kg_ontology_entity_property_range WHERE project_id = #{id,jdbcType=BIGINT};
  </delete>
  <delete id="deleteFromKgProjectEntity" parameterType="java.lang.Long">
    DELETE FROM kg_project_entity WHERE project_id = #{id,jdbcType=BIGINT};
  </delete>
  <delete id="deleteFromKgOntologyRelease" parameterType="java.lang.Long">
    DELETE FROM kg_ontology_release WHERE project_id = #{id,jdbcType=BIGINT};
  </delete>
  <delete id="deleteFromKgReasonSession" parameterType="java.lang.Long">
    DELETE FROM kg_reason_session WHERE project_id = #{id,jdbcType=BIGINT};
  </delete>
  <delete id="deleteFromKgReasonTask" parameterType="java.lang.Long">
    DELETE FROM kg_reason_task WHERE project_id = #{id,jdbcType=BIGINT};
  </delete>
  <delete id="deleteFromKgReasonTutorial" parameterType="java.lang.Long">
    DELETE FROM kg_reason_tutorial WHERE project_id = #{id,jdbcType=BIGINT};
  </delete>
  <delete id="deleteFromKgBuilderJob" parameterType="java.lang.Long">
    DELETE FROM kg_builder_job WHERE project_id = #{id,jdbcType=BIGINT};
  </delete>
  <delete id="deleteFromKgSchedulerInstance" parameterType="java.lang.Long">
    DELETE FROM kg_scheduler_instance WHERE project_id = #{id,jdbcType=BIGINT};
  </delete>
  <delete id="deleteFromKgSchedulerJob" parameterType="java.lang.Long">
    DELETE FROM kg_scheduler_job WHERE project_id = #{id,jdbcType=BIGINT};
  </delete>
  <delete id="deleteFromKgSchedulerTask" parameterType="java.lang.Long">
    DELETE FROM kg_scheduler_task WHERE project_id = #{id,jdbcType=BIGINT};
  </delete>
  <delete id="deleteFromKgResourcePermission" parameterType="java.lang.Long">
    DELETE FROM kg_resource_permission WHERE resource_id = #{id,jdbcType=BIGINT} and resource_tag = 'KNOWLEDGE_BASE';
  </delete>
  <delete id="deleteByExample" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ProjectDOExample">
    delete from kg_project_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ProjectDO">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into kg_project_info (name, description, status, 
      gmt_create, gmt_modified, namespace, 
      biz_domain_id, config, visibility, tag)
    values (#{name,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, 
      #{gmtCreate,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP}, #{namespace,jdbcType=VARCHAR}, 
      #{bizDomainId,jdbcType=BIGINT}, #{config,jdbcType=LONGVARCHAR}, #{visibility,jdbcType=VARCHAR}, #{tag,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ProjectDO">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into kg_project_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtModified != null">
        gmt_modified,
      </if>
      <if test="namespace != null">
        namespace,
      </if>
      <if test="visibility != null">
        visibility,
      </if>
      <if test="bizDomainId != null">
        biz_domain_id,
      </if>
      <if test="tag != null">
        tag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        #{gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="namespace != null">
        #{namespace,jdbcType=VARCHAR},
      </if>
      <if test="visibility != null">
        #{visibility,jdbcType=VARCHAR},
      </if>
      <if test="bizDomainId != null">
        #{bizDomainId,jdbcType=BIGINT},
      </if>
      <if test="config != null">
        #{config,jdbcType=LONGVARCHAR},
      </if>
      <if test="tag != null">
        #{tag,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ProjectDOExample" resultType="java.lang.Long">
    select count(*) from kg_project_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update kg_project_info
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.gmtCreate != null">
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gmtModified != null">
        gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="record.namespace != null">
        namespace = #{record.namespace,jdbcType=VARCHAR},
      </if>
      <if test="record.bizDomainId != null">
        biz_domain_id = #{record.bizDomainId,jdbcType=BIGINT},
      </if>
      <if test="record.config != null">
        config = #{record.config,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.tag != null">
        tag = #{record.tag,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update kg_project_info
    set id = #{record.id,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      namespace = #{record.namespace,jdbcType=VARCHAR},
      biz_domain_id = #{record.bizDomainId,jdbcType=BIGINT},
      config = #{record.config,jdbcType=LONGVARCHAR},
      tag = #{record.tag, jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ProjectDO">
    update kg_project_info
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="namespace != null">
        namespace = #{namespace,jdbcType=VARCHAR},
      </if>
      <if test="visibility != null">
        visibility = #{visibility,jdbcType=VARCHAR},
      </if>
      <if test="tag != null">
        tag = #{tag,jdbcType=VARCHAR},
      </if>
      <if test="bizDomainId != null">
        biz_domain_id = #{bizDomainId,jdbcType=BIGINT},
      </if>
      <if test="config != null">
        config = #{config,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.antgroup.openspg.server.infra.dao.dataobject.ProjectDO">
    update kg_project_info
    set name = #{name,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      namespace = #{namespace,jdbcType=VARCHAR},
      biz_domain_id = #{bizDomainId,jdbcType=BIGINT},
      config = #{config,jdbcType=LONGVARCHAR},
      tag = #{tag,jdbcType=VARCHAR},
    where id = #{id,jdbcType=BIGINT}
  </update>

  <sql id="Query_Condition">
    <if test="record.id != null">
       id = #{record.id, jdbcType=BIGINT} and
    </if>
    <if test="record.name != null and record.name != ''">
      ( name like concat('%', #{record.name}, '%') or
      namespace like concat('%', #{record.name}, '%') or
      id like concat('%', #{record.name}, '%') ) and
    </if>
    <if test="record.namespace != null and record.namespace != ''">
      namespace like concat('%', #{record.namespace}, '%') and
    </if>
    <if test="record.tenantId != null">
      biz_domain_id = #{record.tenantId,jdbcType=BIGINT} and
    </if>
    <if test="record.config != null and record.config != ''">
      config like concat('%', #{record.config}, '%') and
    </if>
    <if test="record.projectIdList != null and record.projectIdList.size() > 0">
      (id in
      <foreach collection="record.projectIdList" item="projectId" open="(" separator="," close=")">
        #{projectId,jdbcType=BIGINT}
      </foreach>
      <if test="record.isOwner != null and record.isOwner == false">
        or visibility = 'PUBLIC_READ'
      </if>
      )
      and
    </if>
    <if test="record.visibility != null and record.visibility != ''">
      visibility = #{record.visibility, jdbcType=VARCHAR} and
    </if>
    1 = 1
  </sql>
  <sql id="Order_Condition">
    ORDER BY
    <if test="orderByGmtCreateDesc != null">
      <choose>
        <when test="orderByGmtCreateDesc">
          gmt_create DESC
        </when>
        <otherwise>
          gmt_create ASC
        </otherwise>
      </choose>
    </if>
    <if test="orderByGmtCreateDesc == null">
      gmt_modified DESC
    </if>
  </sql>

  <select id="selectByCondition" resultMap="BaseResultMap">
    select <include refid="SAMPLE_COLUMN_LIST"/> from kg_project_info where
    <include refid="Query_Condition"/>
    order by gmt_create desc
    limit #{start}, #{size}
  </select>
  <select id="selectCountByCondition" resultType="java.lang.Long">
    select count(*) from kg_project_info where
    <include refid="Query_Condition"/>
  </select>
</mapper>